// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/tag_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TagNode } from "../../store/tag";

export const protobufPackage = "memos.api.v1";

export interface ListTagsRequest {
  /** Query parameter: ?path_prefix=/work */
  pathPrefix: string;
  /**
   * Query parameter: ?include_memo_ids=true
   * Server default: false if not specified
   */
  includeMemoIds: boolean;
  /**
   * Query parameter: ?include_hierarchy=true
   * Server default: true if not specified
   */
  includeHierarchy: boolean;
}

export interface GetTagRequest {
  /**
   * Path parameter: /api/v1/tags/{tag_path}
   * URL encoded if contains '/' (e.g., %2Fwork%2Fproject1)
   */
  tagPath: string;
  /**
   * Query parameter: ?include_memo_ids=true
   * Server default: true if not specified
   */
  includeMemoIds: boolean;
}

export interface RenameTagRequest {
  /** Path parameter: /api/v1/tags/{old_tag_path}:rename */
  oldTagPath: string;
  /** Request body field */
  newTagPath: string;
  /** Request body field - Server default: true if not specified */
  moveChildren: boolean;
}

export interface DeleteTagRequest {
  /** Path parameter: /api/v1/tags/{tag_path} */
  tagPath: string;
  /**
   * Query parameter: ?strategy=REMOVE_FROM_CONTENT
   * Server default: REMOVE_FROM_CONTENT if not specified
   */
  strategy: DeleteTagRequest_DeleteStrategy;
}

export enum DeleteTagRequest_DeleteStrategy {
  /** REMOVE_FROM_CONTENT - Remove tag from all memo content */
  REMOVE_FROM_CONTENT = "REMOVE_FROM_CONTENT",
  /** DELETE_RELATED_MEMOS - Delete memos containing this tag */
  DELETE_RELATED_MEMOS = "DELETE_RELATED_MEMOS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function deleteTagRequest_DeleteStrategyFromJSON(object: any): DeleteTagRequest_DeleteStrategy {
  switch (object) {
    case 0:
    case "REMOVE_FROM_CONTENT":
      return DeleteTagRequest_DeleteStrategy.REMOVE_FROM_CONTENT;
    case 1:
    case "DELETE_RELATED_MEMOS":
      return DeleteTagRequest_DeleteStrategy.DELETE_RELATED_MEMOS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeleteTagRequest_DeleteStrategy.UNRECOGNIZED;
  }
}

export function deleteTagRequest_DeleteStrategyToNumber(object: DeleteTagRequest_DeleteStrategy): number {
  switch (object) {
    case DeleteTagRequest_DeleteStrategy.REMOVE_FROM_CONTENT:
      return 0;
    case DeleteTagRequest_DeleteStrategy.DELETE_RELATED_MEMOS:
      return 1;
    case DeleteTagRequest_DeleteStrategy.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface TagWithMemos {
  tagNode?:
    | TagNode
    | undefined;
  /** Direct memo count (excluding child tags) */
  directMemoCount: number;
  /** Total memo count (including child tags) */
  totalMemoCount: number;
  /** Child tag paths */
  childPaths: string[];
  /** Parent tag path */
  parentPath: string;
}

export interface ListTagsResponse {
  tags: TagWithMemos[];
  totalCount: number;
}

export interface GetTagResponse {
  tag?: TagWithMemos | undefined;
}

export interface RenameTagResponse {
  /** Affected memo IDs */
  affectedMemoIds: string[];
  /** Old and new tag paths that were changed */
  renamedPaths: { [key: string]: string };
}

export interface RenameTagResponse_RenamedPathsEntry {
  key: string;
  value: string;
}

export interface DeleteTagResponse {
  /** Memo IDs that had this tag removed */
  affectedMemoIds: string[];
  /** Tag paths that were deleted */
  deletedTagPaths: string[];
}

function createBaseListTagsRequest(): ListTagsRequest {
  return { pathPrefix: "", includeMemoIds: false, includeHierarchy: false };
}

export const ListTagsRequest: MessageFns<ListTagsRequest> = {
  encode(message: ListTagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pathPrefix !== "") {
      writer.uint32(10).string(message.pathPrefix);
    }
    if (message.includeMemoIds !== false) {
      writer.uint32(16).bool(message.includeMemoIds);
    }
    if (message.includeHierarchy !== false) {
      writer.uint32(24).bool(message.includeHierarchy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pathPrefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.includeMemoIds = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.includeHierarchy = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListTagsRequest>): ListTagsRequest {
    return ListTagsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagsRequest>): ListTagsRequest {
    const message = createBaseListTagsRequest();
    message.pathPrefix = object.pathPrefix ?? "";
    message.includeMemoIds = object.includeMemoIds ?? false;
    message.includeHierarchy = object.includeHierarchy ?? false;
    return message;
  },
};

function createBaseGetTagRequest(): GetTagRequest {
  return { tagPath: "", includeMemoIds: false };
}

export const GetTagRequest: MessageFns<GetTagRequest> = {
  encode(message: GetTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagPath !== "") {
      writer.uint32(10).string(message.tagPath);
    }
    if (message.includeMemoIds !== false) {
      writer.uint32(16).bool(message.includeMemoIds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tagPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.includeMemoIds = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetTagRequest>): GetTagRequest {
    return GetTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTagRequest>): GetTagRequest {
    const message = createBaseGetTagRequest();
    message.tagPath = object.tagPath ?? "";
    message.includeMemoIds = object.includeMemoIds ?? false;
    return message;
  },
};

function createBaseRenameTagRequest(): RenameTagRequest {
  return { oldTagPath: "", newTagPath: "", moveChildren: false };
}

export const RenameTagRequest: MessageFns<RenameTagRequest> = {
  encode(message: RenameTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldTagPath !== "") {
      writer.uint32(10).string(message.oldTagPath);
    }
    if (message.newTagPath !== "") {
      writer.uint32(18).string(message.newTagPath);
    }
    if (message.moveChildren !== false) {
      writer.uint32(24).bool(message.moveChildren);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldTagPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newTagPath = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.moveChildren = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RenameTagRequest>): RenameTagRequest {
    return RenameTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTagRequest>): RenameTagRequest {
    const message = createBaseRenameTagRequest();
    message.oldTagPath = object.oldTagPath ?? "";
    message.newTagPath = object.newTagPath ?? "";
    message.moveChildren = object.moveChildren ?? false;
    return message;
  },
};

function createBaseDeleteTagRequest(): DeleteTagRequest {
  return { tagPath: "", strategy: DeleteTagRequest_DeleteStrategy.REMOVE_FROM_CONTENT };
}

export const DeleteTagRequest: MessageFns<DeleteTagRequest> = {
  encode(message: DeleteTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagPath !== "") {
      writer.uint32(10).string(message.tagPath);
    }
    if (message.strategy !== DeleteTagRequest_DeleteStrategy.REMOVE_FROM_CONTENT) {
      writer.uint32(16).int32(deleteTagRequest_DeleteStrategyToNumber(message.strategy));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tagPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.strategy = deleteTagRequest_DeleteStrategyFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteTagRequest>): DeleteTagRequest {
    return DeleteTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagRequest>): DeleteTagRequest {
    const message = createBaseDeleteTagRequest();
    message.tagPath = object.tagPath ?? "";
    message.strategy = object.strategy ?? DeleteTagRequest_DeleteStrategy.REMOVE_FROM_CONTENT;
    return message;
  },
};

function createBaseTagWithMemos(): TagWithMemos {
  return { tagNode: undefined, directMemoCount: 0, totalMemoCount: 0, childPaths: [], parentPath: "" };
}

export const TagWithMemos: MessageFns<TagWithMemos> = {
  encode(message: TagWithMemos, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagNode !== undefined) {
      TagNode.encode(message.tagNode, writer.uint32(10).fork()).join();
    }
    if (message.directMemoCount !== 0) {
      writer.uint32(16).int32(message.directMemoCount);
    }
    if (message.totalMemoCount !== 0) {
      writer.uint32(24).int32(message.totalMemoCount);
    }
    for (const v of message.childPaths) {
      writer.uint32(34).string(v!);
    }
    if (message.parentPath !== "") {
      writer.uint32(42).string(message.parentPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagWithMemos {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagWithMemos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tagNode = TagNode.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.directMemoCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalMemoCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.childPaths.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parentPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TagWithMemos>): TagWithMemos {
    return TagWithMemos.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagWithMemos>): TagWithMemos {
    const message = createBaseTagWithMemos();
    message.tagNode = (object.tagNode !== undefined && object.tagNode !== null)
      ? TagNode.fromPartial(object.tagNode)
      : undefined;
    message.directMemoCount = object.directMemoCount ?? 0;
    message.totalMemoCount = object.totalMemoCount ?? 0;
    message.childPaths = object.childPaths?.map((e) => e) || [];
    message.parentPath = object.parentPath ?? "";
    return message;
  },
};

function createBaseListTagsResponse(): ListTagsResponse {
  return { tags: [], totalCount: 0 };
}

export const ListTagsResponse: MessageFns<ListTagsResponse> = {
  encode(message: ListTagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      TagWithMemos.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tags.push(TagWithMemos.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListTagsResponse>): ListTagsResponse {
    return ListTagsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagsResponse>): ListTagsResponse {
    const message = createBaseListTagsResponse();
    message.tags = object.tags?.map((e) => TagWithMemos.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseGetTagResponse(): GetTagResponse {
  return { tag: undefined };
}

export const GetTagResponse: MessageFns<GetTagResponse> = {
  encode(message: GetTagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      TagWithMemos.encode(message.tag, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = TagWithMemos.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetTagResponse>): GetTagResponse {
    return GetTagResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTagResponse>): GetTagResponse {
    const message = createBaseGetTagResponse();
    message.tag = (object.tag !== undefined && object.tag !== null) ? TagWithMemos.fromPartial(object.tag) : undefined;
    return message;
  },
};

function createBaseRenameTagResponse(): RenameTagResponse {
  return { affectedMemoIds: [], renamedPaths: {} };
}

export const RenameTagResponse: MessageFns<RenameTagResponse> = {
  encode(message: RenameTagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.affectedMemoIds) {
      writer.uint32(10).string(v!);
    }
    Object.entries(message.renamedPaths).forEach(([key, value]) => {
      RenameTagResponse_RenamedPathsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.affectedMemoIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = RenameTagResponse_RenamedPathsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.renamedPaths[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RenameTagResponse>): RenameTagResponse {
    return RenameTagResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTagResponse>): RenameTagResponse {
    const message = createBaseRenameTagResponse();
    message.affectedMemoIds = object.affectedMemoIds?.map((e) => e) || [];
    message.renamedPaths = Object.entries(object.renamedPaths ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRenameTagResponse_RenamedPathsEntry(): RenameTagResponse_RenamedPathsEntry {
  return { key: "", value: "" };
}

export const RenameTagResponse_RenamedPathsEntry: MessageFns<RenameTagResponse_RenamedPathsEntry> = {
  encode(message: RenameTagResponse_RenamedPathsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTagResponse_RenamedPathsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTagResponse_RenamedPathsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RenameTagResponse_RenamedPathsEntry>): RenameTagResponse_RenamedPathsEntry {
    return RenameTagResponse_RenamedPathsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTagResponse_RenamedPathsEntry>): RenameTagResponse_RenamedPathsEntry {
    const message = createBaseRenameTagResponse_RenamedPathsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDeleteTagResponse(): DeleteTagResponse {
  return { affectedMemoIds: [], deletedTagPaths: [] };
}

export const DeleteTagResponse: MessageFns<DeleteTagResponse> = {
  encode(message: DeleteTagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.affectedMemoIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.deletedTagPaths) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.affectedMemoIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deletedTagPaths.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteTagResponse>): DeleteTagResponse {
    return DeleteTagResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagResponse>): DeleteTagResponse {
    const message = createBaseDeleteTagResponse();
    message.affectedMemoIds = object.affectedMemoIds?.map((e) => e) || [];
    message.deletedTagPaths = object.deletedTagPaths?.map((e) => e) || [];
    return message;
  },
};

export type TagServiceDefinition = typeof TagServiceDefinition;
export const TagServiceDefinition = {
  name: "TagService",
  fullName: "memos.api.v1.TagService",
  methods: {
    /** List all tags with optional filtering */
    listTags: {
      name: "ListTags",
      requestType: ListTagsRequest,
      requestStream: false,
      responseType: ListTagsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [new Uint8Array([14, 18, 12, 47, 97, 112, 105, 47, 118, 49, 47, 116, 97, 103, 115])],
        },
      },
    },
    /** Get specific tag details */
    getTag: {
      name: "GetTag",
      requestType: GetTagRequest,
      requestStream: false,
      responseType: GetTagResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([8, 116, 97, 103, 95, 112, 97, 116, 104])],
          578365826: [
            new Uint8Array([
              28,
              18,
              26,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              97,
              103,
              115,
              47,
              123,
              116,
              97,
              103,
              95,
              112,
              97,
              116,
              104,
              61,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Rename tag globally (supports path moving) */
    renameTag: {
      name: "RenameTag",
      requestType: RenameTagRequest,
      requestStream: false,
      responseType: RenameTagResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              25,
              111,
              108,
              100,
              95,
              116,
              97,
              103,
              95,
              112,
              97,
              116,
              104,
              44,
              110,
              101,
              119,
              95,
              116,
              97,
              103,
              95,
              112,
              97,
              116,
              104,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42,
              58,
              1,
              42,
              50,
              37,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              97,
              103,
              115,
              47,
              123,
              111,
              108,
              100,
              95,
              116,
              97,
              103,
              95,
              112,
              97,
              116,
              104,
              61,
              42,
              42,
              125,
              58,
              114,
              101,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /** Delete tag from all content (without deleting memos) */
    deleteTag: {
      name: "DeleteTag",
      requestType: DeleteTagRequest,
      requestStream: false,
      responseType: DeleteTagResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([8, 116, 97, 103, 95, 112, 97, 116, 104])],
          578365826: [
            new Uint8Array([
              28,
              42,
              26,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              97,
              103,
              115,
              47,
              123,
              116,
              97,
              103,
              95,
              112,
              97,
              116,
              104,
              61,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
