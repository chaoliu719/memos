// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/category_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";
import { State, stateFromJSON, stateToNumber } from "./common";

export const protobufPackage = "memos.api.v1";

export interface Category {
  /**
   * The name of the category.
   * Format: categories/{id}
   */
  name: string;
  /** The system-generated unique ID for the category. */
  id: number;
  /** The display name of the category. */
  displayName: string;
  /** The hierarchical path of the category. */
  path: string;
  /**
   * The parent category name. Empty for root categories.
   * Format: categories/{id}
   */
  parent: string;
  /** The color of the category in hex format (e.g., #6366f1). */
  color: string;
  /** The icon emoji of the category. */
  icon: string;
  /** The timestamp when the category was created. */
  createTime?:
    | Date
    | undefined;
  /** The timestamp when the category was last updated. */
  updateTime?:
    | Date
    | undefined;
  /** The state of the category. */
  state: State;
}

export interface CreateCategoryRequest {
  /** The category to create. */
  category?: Category | undefined;
}

export interface ListCategoriesRequest {
  /**
   * The maximum number of categories to return. The service may return fewer than
   * this value. If unspecified, at most 50 categories will be returned. The
   * maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCategories` call. Provide this to
   * retrieve the subsequent page.
   */
  pageToken: string;
  /** Optional filter expression to filter categories. */
  filter: string;
}

export interface ListCategoriesResponse {
  /** The list of categories. */
  categories: Category[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If
   * this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

export interface GetCategoryRequest {
  /**
   * The name of the category to get.
   * Format: categories/{id}
   */
  name: string;
}

export interface UpdateCategoryRequest {
  /**
   * The category to update. The category's `name` field is used to identify the
   * category to update.
   */
  category?:
    | Category
    | undefined;
  /** The list of fields to update. */
  updateMask?: string[] | undefined;
}

export interface DeleteCategoryRequest {
  /**
   * The name of the category to delete.
   * Format: categories/{id}
   */
  name: string;
}

export interface GetCategoryHierarchyRequest {
  /** Optional filter expression to filter the hierarchy. */
  filter: string;
}

export interface GetCategoryHierarchyResponse {
  /** The hierarchical list of categories, ordered by path. */
  categories: Category[];
}

function createBaseCategory(): Category {
  return {
    name: "",
    id: 0,
    displayName: "",
    path: "",
    parent: "",
    color: "",
    icon: "",
    createTime: undefined,
    updateTime: undefined,
    state: State.STATE_UNSPECIFIED,
  };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    if (message.parent !== "") {
      writer.uint32(42).string(message.parent);
    }
    if (message.color !== "") {
      writer.uint32(50).string(message.color);
    }
    if (message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    if (message.state !== State.STATE_UNSPECIFIED) {
      writer.uint32(80).int32(stateToNumber(message.state));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.state = stateFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Category>): Category {
    return Category.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Category>): Category {
    const message = createBaseCategory();
    message.name = object.name ?? "";
    message.id = object.id ?? 0;
    message.displayName = object.displayName ?? "";
    message.path = object.path ?? "";
    message.parent = object.parent ?? "";
    message.color = object.color ?? "";
    message.icon = object.icon ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? State.STATE_UNSPECIFIED;
    return message;
  },
};

function createBaseCreateCategoryRequest(): CreateCategoryRequest {
  return { category: undefined };
}

export const CreateCategoryRequest: MessageFns<CreateCategoryRequest> = {
  encode(message: CreateCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== undefined) {
      Category.encode(message.category, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = Category.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateCategoryRequest>): CreateCategoryRequest {
    return CreateCategoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCategoryRequest>): CreateCategoryRequest {
    const message = createBaseCreateCategoryRequest();
    message.category = (object.category !== undefined && object.category !== null)
      ? Category.fromPartial(object.category)
      : undefined;
    return message;
  },
};

function createBaseListCategoriesRequest(): ListCategoriesRequest {
  return { pageSize: 0, pageToken: "", filter: "" };
}

export const ListCategoriesRequest: MessageFns<ListCategoriesRequest> = {
  encode(message: ListCategoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListCategoriesRequest>): ListCategoriesRequest {
    return ListCategoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCategoriesRequest>): ListCategoriesRequest {
    const message = createBaseListCategoriesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListCategoriesResponse(): ListCategoriesResponse {
  return { categories: [], nextPageToken: "" };
}

export const ListCategoriesResponse: MessageFns<ListCategoriesResponse> = {
  encode(message: ListCategoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListCategoriesResponse>): ListCategoriesResponse {
    return ListCategoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCategoriesResponse>): ListCategoriesResponse {
    const message = createBaseListCategoriesResponse();
    message.categories = object.categories?.map((e) => Category.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetCategoryRequest(): GetCategoryRequest {
  return { name: "" };
}

export const GetCategoryRequest: MessageFns<GetCategoryRequest> = {
  encode(message: GetCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCategoryRequest>): GetCategoryRequest {
    return GetCategoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCategoryRequest>): GetCategoryRequest {
    const message = createBaseGetCategoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateCategoryRequest(): UpdateCategoryRequest {
  return { category: undefined, updateMask: undefined };
}

export const UpdateCategoryRequest: MessageFns<UpdateCategoryRequest> = {
  encode(message: UpdateCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== undefined) {
      Category.encode(message.category, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = Category.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCategoryRequest>): UpdateCategoryRequest {
    return UpdateCategoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCategoryRequest>): UpdateCategoryRequest {
    const message = createBaseUpdateCategoryRequest();
    message.category = (object.category !== undefined && object.category !== null)
      ? Category.fromPartial(object.category)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteCategoryRequest(): DeleteCategoryRequest {
  return { name: "" };
}

export const DeleteCategoryRequest: MessageFns<DeleteCategoryRequest> = {
  encode(message: DeleteCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteCategoryRequest>): DeleteCategoryRequest {
    return DeleteCategoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCategoryRequest>): DeleteCategoryRequest {
    const message = createBaseDeleteCategoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCategoryHierarchyRequest(): GetCategoryHierarchyRequest {
  return { filter: "" };
}

export const GetCategoryHierarchyRequest: MessageFns<GetCategoryHierarchyRequest> = {
  encode(message: GetCategoryHierarchyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCategoryHierarchyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCategoryHierarchyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCategoryHierarchyRequest>): GetCategoryHierarchyRequest {
    return GetCategoryHierarchyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCategoryHierarchyRequest>): GetCategoryHierarchyRequest {
    const message = createBaseGetCategoryHierarchyRequest();
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseGetCategoryHierarchyResponse(): GetCategoryHierarchyResponse {
  return { categories: [] };
}

export const GetCategoryHierarchyResponse: MessageFns<GetCategoryHierarchyResponse> = {
  encode(message: GetCategoryHierarchyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCategoryHierarchyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCategoryHierarchyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCategoryHierarchyResponse>): GetCategoryHierarchyResponse {
    return GetCategoryHierarchyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCategoryHierarchyResponse>): GetCategoryHierarchyResponse {
    const message = createBaseGetCategoryHierarchyResponse();
    message.categories = object.categories?.map((e) => Category.fromPartial(e)) || [];
    return message;
  },
};

export type CategoryServiceDefinition = typeof CategoryServiceDefinition;
export const CategoryServiceDefinition = {
  name: "CategoryService",
  fullName: "memos.api.v1.CategoryService",
  methods: {
    /** CreateCategory creates a category. */
    createCategory: {
      name: "CreateCategory",
      requestType: CreateCategoryRequest,
      requestStream: false,
      responseType: Category,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([8, 99, 97, 116, 101, 103, 111, 114, 121])],
          578365826: [
            new Uint8Array([
              30,
              58,
              8,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              18,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** ListCategories lists categories with optional filtering. */
    listCategories: {
      name: "ListCategories",
      requestType: ListCategoriesRequest,
      requestStream: false,
      responseType: ListCategoriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([0])],
          578365826: [
            new Uint8Array([
              20,
              18,
              18,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** GetCategory gets a category. */
    getCategory: {
      name: "GetCategory",
      requestType: GetCategoryRequest,
      requestStream: false,
      responseType: Category,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              29,
              18,
              27,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** UpdateCategory updates a category. */
    updateCategory: {
      name: "UpdateCategory",
      requestType: UpdateCategoryRequest,
      requestStream: false,
      responseType: Category,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              20,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            new Uint8Array([
              48,
              58,
              8,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              50,
              36,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** DeleteCategory deletes a category. */
    deleteCategory: {
      name: "DeleteCategory",
      requestType: DeleteCategoryRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              29,
              42,
              27,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** GetCategoryHierarchy gets the full category hierarchy for the authenticated user. */
    getCategoryHierarchy: {
      name: "GetCategoryHierarchy",
      requestType: GetCategoryHierarchyRequest,
      requestStream: false,
      responseType: GetCategoryHierarchyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([0])],
          578365826: [
            new Uint8Array([
              30,
              18,
              28,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
              58,
              104,
              105,
              101,
              114,
              97,
              114,
              99,
              104,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
